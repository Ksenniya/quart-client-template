Yes, that’s exactly the idea. By moving the main processing logic into the workflow function (for example, process_companies), you offload the asynchronous, sometimes long-running tasks from your endpoint. This makes your controllers leaner and frees them from business logic, ensuring they only coordinate request/response activities. Instead of fire-and-forget tasks, the workflow function is applied asynchronously before the entity is persisted, guaranteeing that all state changes are captured by the persistence mechanism.

For example, instead of launching an asyncio.create_task inside the controller, you can attach all processing logic—including enriching company data, external API calls, filtering, and error handling—to the workflow function. In it, you modify the entity (such as adding enriched data or updating status) directly, and these edits will be persisted. If you need to retrieve or create supplementary data in other entity_models, the workflow function becomes an ideal place to perform those operations as long as you don’t update the current entity_model to avoid recursion.

This approach not only simplifies the endpoint implementation (just gathering and validating input, then calling entity_service.add_item with the workflow) but also improves separation of concerns and maintainability. In summary, yes—you can and should move as much async and business logic into process_{entity_name} (the workflow function) as possible, while letting the controller serve as a thin layer handling HTTP details.