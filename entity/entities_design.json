{
    "primary_entities": [
        {
            "entity_name": "token",
            "endpoints": {
                "POST": [
                    {
                        "endpoint": "/auth/token",
                        "description": "Create a new token.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    data = await request.get_json()\n    return jsonify({\"token\": token})\n",
                        "action": "authenticate",
                        "suggested_workflow": [
                            {
                                "start_state": "token_not_created",
                                "end_state": "token_created",
                                "action": "authenticate",
                                "complete_code_for_action_derived_from_the_prototype": "\n    data = await request.get_json()\n    return jsonify({\"token\": token})\n",
                                "description": "Create a new token.",
                                "related_secondary_entities": []
                            }
                        ],
                        "related_secondary_entities": [
                            "status"
                        ]
                    }
                ],
                "GET": [
                    {
                        "endpoint": "/token/<id>",
                        "description": "Retrieve a token by ID.",
                        "complete_code_for_action_derived_from_the_prototype": ""
                    },
                    {
                        "endpoint": "/tokens",
                        "description": "Retrieve all tokens entries.",
                        "complete_code_for_action_derived_from_the_prototype": ""
                    }
                ]
            }
        },
        {
            "entity_name": "environment",
            "endpoints": {
                "POST": [
                    {
                        "endpoint": "/deploy/environments",
                        "description": "Create a new environment.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    data = await request.get_json()\n    env_result = await entity_service.add_item(\n        token=token,\n        entity_model=\"environments\",\n        entity_version=ENTITY_VERSION,\n        entity=data\n    )\n    async with aiohttp.ClientSession() as session:\n        async with session.post(TEAMCITY_API_URL, json={\n            \"buildType\": {\"id\": \"KubernetesPipeline_CyodaSaas\"},\n            \"properties\": {\n                \"property\": [\n                    {\"name\": \"user_defined_keyspace\", \"value\": data.get(\"user_name\")},\n                    {\"name\": \"user_defined_namespace\", \"value\": data.get(\"user_name\")}\n                ]\n            }\n        }) as response:\n            await response.text()\n    return jsonify(env_result)\n",
                        "action": "create_environment",
                        "suggested_workflow": [
                            {
                                "start_state": "environment_not_created",
                                "end_state": "environment_created",
                                "action": "create_environment",
                                "complete_code_for_action_derived_from_the_prototype": "\n    data = await request.get_json()\n    env_result = await entity_service.add_item(\n        token=token,\n        entity_model=\"environments\",\n        entity_version=ENTITY_VERSION,\n        entity=data\n    )\n    async with aiohttp.ClientSession() as session:\n        async with session.post(TEAMCITY_API_URL, json={\n            \"buildType\": {\"id\": \"KubernetesPipeline_CyodaSaas\"},\n            \"properties\": {\n                \"property\": [\n                    {\"name\": \"user_defined_keyspace\", \"value\": data.get(\"user_name\")},\n                    {\"name\": \"user_defined_namespace\", \"value\": data.get(\"user_name\")}\n                ]\n            }\n        }) as response:\n            await response.text()\n    return jsonify(env_result)\n",
                                "description": "Create a new environment.",
                                "related_secondary_entities": [
                                    "status",
                                    "statistic"
                                ]
                            }
                        ],
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    }
                ],
                "GET": [
                    {
                        "endpoint": "/environment/<id>",
                        "description": "Retrieve a environment by ID.",
                        "complete_code_for_action_derived_from_the_prototype": "",
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    },
                    {
                        "endpoint": "/environments",
                        "description": "Retrieve all environments entries.",
                        "complete_code_for_action_derived_from_the_prototype": "",
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    }
                ]
            }
        },
        {
            "entity_name": "user_app",
            "endpoints": {
                "POST": [
                    {
                        "endpoint": "/deploy/user-apps",
                        "description": "Create a new user_app.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    data = await request.get_json()\n    app_result = await entity_service.add_item(\n        token=token,\n        entity_model=\"user_apps\",\n        entity_version=ENTITY_VERSION,\n        entity=data\n    )\n    async with aiohttp.ClientSession() as session:\n        async with session.post(TEAMCITY_API_URL, json={\n            \"buildType\": {\"id\": \"KubernetesPipeline_CyodaSaasUserEnv\"},\n            \"properties\": {\n                \"property\": [\n                    {\"name\": \"user_defined_keyspace\", \"value\": \"example_keyspace\"},\n                    {\"name\": \"user_defined_namespace\", \"value\": \"example_namespace\"}\n                ]\n            }\n        }) as response:\n            await response.text()\n    return jsonify(app_result)\n",
                        "action": "deploy_user_app",
                        "suggested_workflow": [
                            {
                                "start_state": "user_app_not_created",
                                "end_state": "user_app_created",
                                "action": "deploy_user_app",
                                "complete_code_for_action_derived_from_the_prototype": "\n    data = await request.get_json()\n    app_result = await entity_service.add_item(\n        token=token,\n        entity_model=\"user_apps\",\n        entity_version=ENTITY_VERSION,\n        entity=data\n    )\n    async with aiohttp.ClientSession() as session:\n        async with session.post(TEAMCITY_API_URL, json={\n            \"buildType\": {\"id\": \"KubernetesPipeline_CyodaSaasUserEnv\"},\n            \"properties\": {\n                \"property\": [\n                    {\"name\": \"user_defined_keyspace\", \"value\": \"example_keyspace\"},\n                    {\"name\": \"user_defined_namespace\", \"value\": \"example_namespace\"}\n                ]\n            }\n        }) as response:\n            await response.text()\n    return jsonify(app_result)\n",
                                "description": "Create a new user_app.",
                                "related_secondary_entities": [
                                    "status",
                                    "statistic"
                                ]
                            }
                        ],
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    },
                    {
                        "endpoint": "/deploy/user-apps/<build_id>/cancel",
                        "description": "Create a new user_app.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    from app_init.app_init import entity_service\n    result = await entity_service.get_item(\n        token=token,\n        entity_model=\"user_apps\",\n        entity_version=ENTITY_VERSION,\n        technical_id=build_id\n    )\n    if result:\n        result[\"status\"] = \"canceled\"\n        return jsonify({\"message\": \"Build canceled successfully.\"})\n    else:\n        return jsonify({\"message\": \"Build not found.\"}), 404\n",
                        "action": "cancel_user_app",
                        "suggested_workflow": [
                            {
                                "start_state": "user_app_not_created",
                                "end_state": "user_app_created",
                                "action": "cancel_user_app",
                                "complete_code_for_action_derived_from_the_prototype": "\n    from app_init.app_init import entity_service\n    result = await entity_service.get_item(\n        token=token,\n        entity_model=\"user_apps\",\n        entity_version=ENTITY_VERSION,\n        technical_id=build_id\n    )\n    if result:\n        result[\"status\"] = \"canceled\"\n        return jsonify({\"message\": \"Build canceled successfully.\"})\n    else:\n        return jsonify({\"message\": \"Build not found.\"}), 404\n",
                                "description": "Create a new user_app.",
                                "related_secondary_entities": [
                                    "status",
                                    "statistic"
                                ]
                            }
                        ],
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    }
                ],
                "GET": [
                    {
                        "endpoint": "/user_app/<id>",
                        "description": "Retrieve a user_app by ID.",
                        "complete_code_for_action_derived_from_the_prototype": "",
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    },
                    {
                        "endpoint": "/user_apps",
                        "description": "Retrieve all user_apps entries.",
                        "complete_code_for_action_derived_from_the_prototype": "",
                        "related_secondary_entities": [
                            "status",
                            "statistic"
                        ]
                    }
                ]
            }
        }
    ],
    "secondary_entities": [
        {
            "entity_name": "status",
            "endpoints": {
                "GET": [
                    {
                        "endpoint": "/deploy/environments/<build_id>/status",
                        "description": "Retrieve status information.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    env_result = await entity_service.get_item(\n        token=token,\n        entity_model=\"environments\",\n        entity_version=ENTITY_VERSION,\n        technical_id=build_id\n    )\n    return jsonify(env_result)\n"
                    },
                    {
                        "endpoint": "/deploy/user-apps/<build_id>/status",
                        "description": "Retrieve status information.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    app_result = await entity_service.get_item(\n        token=token,\n        entity_model=\"user_apps\",\n        entity_version=ENTITY_VERSION,\n        technical_id=build_id\n    )\n    return jsonify(app_result)\n"
                    }
                ]
            }
        },
        {
            "entity_name": "statistic",
            "endpoints": {
                "GET": [
                    {
                        "endpoint": "/deploy/environments/<build_id>/statistics",
                        "description": "Retrieve statistic information.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    statistics = {\"build_id\": build_id, \"duration\": \"10m\", \"success\": True}\n    return jsonify(statistics)\n"
                    },
                    {
                        "endpoint": "/deploy/user-apps/<build_id>/statistics",
                        "description": "Retrieve statistic information.",
                        "complete_code_for_action_derived_from_the_prototype": "\n    statistics = {\"build_id\": build_id, \"duration\": \"15m\", \"success\": False}\n    return jsonify(statistics)\n"
                    }
                ]
            }
        }
    ]
}