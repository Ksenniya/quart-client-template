{"primary_entities": [], "secondary_entities": [{"entity_name": "company", "endpoints": {"GET": [{"endpoint": "/companies", "description": "Retrieve company information.", "complete_code_for_action_derived_from_the_prototype": "\n    \"\"\"\n    GET /companies\n     - Search companies by optional query parameters (name, location, businessId, companyForm).\n     - Only companies with status \"Active\" are returned.\n     - Output format is determined by the \"format\" querystring parameter:\n         \u2022 JSON (default) or CSV (if format=csv)\n    \"\"\"\n    # Retrieve query parameters.\n    name = request.args.get(\"name\")\n    location = request.args.get(\"location\")\n    business_id = request.args.get(\"businessId\")\n    company_form = request.args.get(\"companyForm\")\n    output_format = (request.args.get(\"format\") or \"json\").lower()\n\n    # Filter companies based on search criteria from the in-memory cache.\n    filtered_companies = []\n    for comp in companies_cache:\n        # Only include active companies.\n        if (comp.get(\"status\") or \"\").lower() != \"active\":\n            continue\n        if name and name.lower() not in (comp.get(\"companyName\") or \"\").lower():\n            continue\n        if location and location.lower() not in (comp.get(\"location\") or \"\").lower():\n            continue\n        if business_id and business_id != comp.get(\"businessId\"):\n            continue\n        if company_form and company_form.lower() not in (comp.get(\"companyType\") or \"\").lower():\n            continue\n\n        # For companies without LEI, mark as \"Not Available\"\n        comp_copy = comp.copy()\n        if not comp_copy.get(\"lei\"):\n            comp_copy[\"lei\"] = \"Not Available\"\n        filtered_companies.append(comp_copy)\n\n    if not filtered_companies:\n        return jsonify({\"error\": \"No companies found\"}), 404\n\n    # Return results in the selected output format.\n    if output_format == \"csv\":\n        output = io.StringIO()\n        writer = csv.DictWriter(output, fieldnames=filtered_companies[0].keys())\n        writer.writeheader()\n        for comp in filtered_companies:\n            writer.writerow(comp)\n        return Response(output.getvalue(), mimetype=\"text/csv\")\n    else:\n        return jsonify({\"companies\": filtered_companies})\n"}]}}, {"entity_name": "lei", "endpoints": {"GET": [{"endpoint": "/companies/lei", "description": "Retrieve lei information.", "complete_code_for_action_derived_from_the_prototype": "\n    \"\"\"\n    GET /companies/lei\n      - Enrich company data by retrieving its Legal Entity Identifier (LEI)\n      - Uses businessId as parameter for lookup.\n      - If the company exists in the local cache and already has a LEI, returns that value;\n        otherwise, calls an external (mocked) API to look up the LEI.\n    \"\"\"\n    business_id = request.args.get(\"businessId\")\n    if not business_id:\n        return jsonify({\"error\": \"Missing businessId parameter\"}), 400\n\n    # Retrieve the company using the provided businessId from the local cache.\n    company = next((c for c in companies_cache if c.get(\"businessId\") == business_id), None)\n    if not company:\n        return jsonify({\"error\": \"Company not found\"}), 404\n\n    lei_value = company.get(\"lei\")\n    if lei_value:\n        return jsonify({\"lei\": lei_value})\n    else:\n        # No LEI available in the record; perform external lookup.\n        external_api_url = f\"http://external-lei-api.com/lookup?businessId={business_id}\"  # Placeholder URL.\n        async with aiohttp.ClientSession() as session:\n            try:\n                async with session.get(external_api_url) as resp:\n                    if resp.status == 200:\n                        data = await resp.json()\n                        lei = data.get(\"lei\", \"Not Available\")\n                        # Update the company record with the new LEI.\n                        company[\"lei\"] = lei\n                        return jsonify({\"lei\": lei})\n                    else:\n                        return jsonify({\"lei\": \"Not Available\"}), 200\n            except Exception as e:\n                # TODO: Log the exception properly.\n                return jsonify({\"lei\": \"Not Available\"}), 200\n"}]}}]}