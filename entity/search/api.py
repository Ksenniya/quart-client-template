"from quart import Blueprint, request, jsonify\nfrom app_init.app_init import entity_service, cyoda_token\nfrom common.config.config import ENTITY_VERSION\nimport uuid\nimport asyncio\n\napi_bp_search = Blueprint('api/search', __name__)\n\nENTITY_MODEL = 'search'\n\n@api_bp_search.route('/api/companies/search', methods=['POST'])\nasync def add_search():\n    \"\"\"Create a new search.\"\"\"\n    data = await request.json\n    if not data:\n        return jsonify({\"error\": \"No data provided\"}), 400\n    try:\n        search_id = await entity_service.add_item(\n            token=cyoda_token,\n            entity_model=ENTITY_MODEL,\n            entity_version=ENTITY_VERSION,\n            entity=data\n        )\n        return jsonify({'search_id': search_id}), 201\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n@api_bp_search.route('/search/<id>', methods=['GET'])\nasync def get_id(id):\n    \"\"\"Retrieve a search by ID.\"\"\"\n    try:\n        data = await entity_service.get_item(\n            token=cyoda_token,\n            entity_model=ENTITY_MODEL,\n            entity_version=ENTITY_VERSION,\n            technical_id=id\n        )\n        return jsonify({\"data\": data}), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n@api_bp_search.route('/searches', methods=['GET'])\nasync def get_searchs():\n    \"\"\"Retrieve all searches entries.\"\"\"\n    try:\n        data = await entity_service.get_items(\n            token=cyoda_token,\n            entity_model=ENTITY_MODEL,\n            entity_version=ENTITY_VERSION\n        )\n        return jsonify({\"data\": data}), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n"