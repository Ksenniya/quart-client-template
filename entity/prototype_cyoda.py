{
    "entity/prototype.py": "from dataclasses import dataclass\nfrom quart import Quart, request, jsonify\nfrom quart_schema import QuartSchema, validate_request, validate_response\nimport aiohttp\nimport pandas as pd\nimport io\nfrom common.repository.cyoda.cyoda_init import init_cyoda\nfrom app_init.app_init import cyoda_token, entity_service\n\napp = Quart(__name__)\nQuartSchema(app)\n\nENTITY_VERSION = 1\n\n@app.before_serving\nasync def startup():\n    await init_cyoda(cyoda_token)\n\n@dataclass\nclass DataDownloadRequest:\n    url: str\n\n@dataclass\nclass DataDownloadResponse:\n    message: str\n    report_id: str\n\n@dataclass\nclass AnalysisFilters:\n    property_type: str = None\n    neighborhood: str = None\n\n@dataclass\nclass DataAnalysisRequest:\n    filters: AnalysisFilters\n\n@dataclass\nclass DataAnalysisResponse:\n    message: str\n    report_url: str\n    average_price: float\n    property_type_distribution: dict\n\n@app.route('/reports', methods=['POST'])\n@validate_request(DataDownloadRequest)\n@validate_response(DataDownloadResponse, 201)\nasync def download_data(data: DataDownloadRequest):\n    url = data.url\n    if not url:\n        return jsonify({\"error\": \"URL is required.\"}), 400\n    async with aiohttp.ClientSession() as session:\n        try:\n            async with session.get(url) as response:\n                if response.status != 200:\n                    return jsonify({\"error\": \"Failed to download data.\"}), 500\n                content = await response.text()\n                df = pd.read_csv(io.StringIO(content))\n                report = {\"csv_content\": content, \"statistics\": df.describe().to_dict()}\n                stored = entity_service.add_item(token=cyoda_token, entity_model=\"report\", entity_version=ENTITY_VERSION, entity=report)\n                report_id = stored.get(\"technical_id\", \"0\")\n                return DataDownloadResponse(message=\"Data downloaded successfully.\", report_id=report_id), 201\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n@app.route('/reports/<report_id>/download', methods=['GET'])\nasync def download_report(report_id):\n    report = entity_service.get_item(token=cyoda_token, entity_model=\"report\", entity_version=ENTITY_VERSION, technical_id=report_id)\n    if not report:\n        return jsonify({\"error\": \"Report not found.\"}), 404\n    report_content = f\"Report for ID {report_id}:\\n\" + str(report.get(\"statistics\", {}))\n    return report_content, 200, {'Content-Type': 'text/plain'}\n\nif __name__ == '__main__':\n    app.run(use_reloader=False, debug=True, host='0.0.0.0', port=8000, threaded=True)\n"
}